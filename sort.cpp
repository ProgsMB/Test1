#include <stdio.h>
#include <stdlib.h>
#include <mem.h>

/*
Вопрос 3. 

На языке С/С++, написать функцию, которая быстрее всего
(по процессорным тикам) отсортирует данный ей массив чисел.
Массив может быть любого размера со случайным порядком
чисел (в том числе и отсортированным).

Объяснить почему вы считаете, что функция соответствует
заданным критериям.
*/

/*
В указанном случае, как и в большинстве случаев самый оптимальный
 вариант - либо  быстрая сортировка, либо сортировка слиянием.
 //Оба метода имеют среднее время пропорциональное N log2(N).
 Это лучшее время из возможных. Правда, время на сортированных
 массивах у быстрой сортировки может ухудшаться до квадрата N,
 но и этот вариант в большинстве случаев вполне нормален.
 Сортировка слиянием имеет фиксированное время N log2(N), но
 в большинстве практических случаев оно немного выше, чем у
 быстрой сортировки.
 Поэтому можно просто пользоваться встроенной функцией C++
 qsort.  Она как раз реализует быструю сортировку и хорошо
 оптимизирована под современную технику и программы.
 Написание сортировки вручную
 обычно бессмысленно. Разве что массив очень часто может быть
 сортированным и при этом время является критичным для задачи.
*/

// функция сравнения элементов массива
int compareint(const void * x1, const void * x2)
{
 return ( *(int*)x1 - *(int*)x2 );

 //По правилам qsort функция должна возвращать 0,
 //отрицательное или положительное число в зависимости
 //от результатов сравнения
 //для чисел этот алгоритм можно упростить,
 //так как если результат вычитания равен 0, то числа равны,
 //< 0: x1 < x2; > 0: x1 > x2

}


int SortTest( void )
{
 //пример использования функции qsort
 int arrtst[] = { 12, 14, 34, 19, 11, 29 };

 // сортируем массив чисел arr
 //(количество элементов и их тип определяется автоматически
 //для безопасности)
 qsort( arrtst, sizeof( arrtst ) / sizeof( arrtst [ 0 ] ),
  sizeof( arrtst [ 0 ] ), compareint );

 //выводим

 for ( int ix = 0; ix < sizeof( arrtst ) / sizeof( arrtst [ 0 ] ); ix++)
 {
   printf( "%d;", arrtst [ ix ] );
 }
 puts( "" );
 return 0;
}



